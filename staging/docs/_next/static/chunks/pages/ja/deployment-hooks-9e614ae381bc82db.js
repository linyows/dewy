(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[388],{1930:(n,e,o)=>{"use strict";o.r(e),o.d(e,{includes:()=>t,upper:()=>r});let t={transform(n){let[e,o]=Object.values(n);return!!Array.isArray(e)&&e.includes(o)}},r={transform(n){let e=n[0];return"string"==typeof e?e.toUpperCase():e}}},2665:(n,e,o)=>{"use strict";o.r(e),o.d(e,{callout:()=>t});let t={render:o(9499).Pq,children:["paragraph","tag","list"],attributes:{type:{type:String,default:"note",matches:["tip","note","important","warning","caution"],errorLevel:"critical"},title:{type:String}}}},3930:(n,e,o)=>{"use strict";o.r(e),o.d(e,{fence:()=>s,heading:()=>a,table:()=>p});var t=o(3854),r=o(9499);let s={render:r.NG,attributes:t.a9.fence.attributes},a={render:r.DZ,children:["inline"],attributes:{id:{type:String},level:{type:Number,required:!0,default:1},className:{type:String}},transform(n,e){let o=n.transformAttributes(e),r=n.transformChildren(e),s=o.id&&"string"==typeof o.id?o.id:r.filter(n=>"string"==typeof n).join(" ").replace(/[?]/g,"").replace(/\s+/g,"-").toLowerCase();return new t.vw(this.render,{...o,id:s},r)}},p={render:r.XI,attributes:t.a9.table.attributes}},7584:(n,e,o)=>{"use strict";o.r(e),o.d(e,{__N_SSG:()=>m,default:()=>f,markdoc:()=>b});var t=o(4232),r=o(3423),s=o(3854),a=o(9146),p=o(2665),i=o(3930),l=o(1930);let c={tags:(0,a.X)(p),nodes:(0,a.X)(i),functions:(0,a.X)(l),...(0,a.X)({})},d=new s.Ay.Tokenizer({allowComments:!0}).tokenize('---\ntitle: デプロイメントフック\ndescription: |\n  デプロイメントフックは、デプロイの前後にカスタムコマンドを実行する機能です。\n  データベースバックアップ、サービス管理、通知送信など、デプロイプロセスを柔軟にカスタマイズできます。\n---\n\n# {% $markdoc.frontmatter.title %} {% #overview %}\n\n{% $markdoc.frontmatter.description %}\n\n## 概要 {% #overview-details %}\n\nデプロイメントフックは、Dewyの自動デプロイプロセスをカスタマイズするための強力な機能です。アプリケーションのデプロイ前後に任意のシェルコマンドを実行でき、データベースの操作、外部サービスとの連携、検証処理など、様々な用途に活用できます。\n\n**主な特徴:**\n- **柔軟な実行タイミング**: デプロイ前後での実行制御\n- **完全な環境アクセス**: 環境変数とファイルシステムへのフルアクセス\n- **詳細な実行結果**: stdout/stderr、終了コード、実行時間の記録\n- **通知連携**: 設定済み通知チャネルへの実行結果送信\n\n## フックの種類と動作 {% #hook-types %}\n\n### Before Deploy Hook {% #before-hook %}\n\nデプロイが開始される**前**に実行されるフックです。\n\n**実行タイミング:**\n- アーティファクトダウンロード後\n- ファイル展開とシンボリックリンク作成前\n- アプリケーション再起動前\n\n**重要な動作:**\n```bash\n# Before Hookが失敗した場合、デプロイは中止される\ndewy server --registry ghr://owner/repo \\\n  --before-deploy-hook "scripts/pre-check.sh" \\\n  -- /opt/myapp/current/myapp\n```\n\n{% callout type="warning" title="デプロイ中止の条件" %}\nBefore Deploy Hookが0以外の終了コードで終了した場合、デプロイプロセス全体が中止されます。\nこの動作により、事前条件が満たされていない場合の安全なデプロイ防止が可能です。\n{% /callout %}\n\n### After Deploy Hook {% #after-hook %}\n\nデプロイが**成功**した後に実行されるフックです。\n\n**実行タイミング:**\n- ファイル展開とシンボリックリンク作成完了後\n- アプリケーション再起動完了後（server コマンドの場合）\n- デプロイプロセスの最終段階\n\n**重要な動作:**\n```bash\n# After Hookが失敗してもデプロイは成功として扱われる\ndewy server --registry ghr://owner/repo \\\n  --after-deploy-hook "scripts/post-deploy-validation.sh" \\\n  -- /opt/myapp/current/myapp\n```\n\n{% callout type="note" %}\nAfter Deploy Hookの失敗はデプロイの成功ステータスに影響しません。\nただし、エラーはログに記録され、設定されている場合は通知が送信されます。\n{% /callout %}\n\n## 実行環境と制約 {% #execution-environment %}\n\n### 実行環境 {% #environment %}\n\nフックは以下の環境で実行されます：\n\n**シェル実行:**\n```bash\n/bin/sh -c "your-command"\n```\n\n**作業ディレクトリ:**\n- Dewyの実行ディレクトリ（通常はアプリケーションのルートディレクトリ）\n\n**環境変数:**\n- Dewyプロセスのすべての環境変数を継承\n- 実行時の環境変数へのフルアクセス\n\n### 実行結果の取得 {% #execution-results %}\n\nフック実行時に以下の情報が記録されます：\n\n{% table %}\n* 項目\n* 説明\n* 用途\n---\n* Command\n* 実行されたコマンド文字列\n* デバッグとログ記録\n---\n* Stdout\n* 標準出力の内容\n* 実行結果の確認\n---\n* Stderr\n* 標準エラー出力\n* エラー内容の把握\n---\n* ExitCode\n* プロセス終了コード\n* 成功/失敗の判定\n---\n* Duration\n* 実行時間\n* パフォーマンス監視\n{% /table %}\n\n**ログ出力例:**\n```json\n{\n  "time": "2024-03-15T10:30:45Z",\n  "level": "INFO",\n  "msg": "Execute hook success",\n  "command": "backup-database.sh",\n  "stdout": "Backup completed successfully",\n  "stderr": "",\n  "exit_code": 0,\n  "duration": "2.5s"\n}\n```\n\n## 設定方法 {% #configuration %}\n\n### コマンドライン設定 {% #command-line %}\n\n```bash\n# 基本形式\ndewy server --registry <registry-url> \\\n  --before-deploy-hook "<command>" \\\n  --after-deploy-hook "<command>" \\\n  -- <application-command>\n```\n\n### 設定例 {% #configuration-examples %}\n\n**単純なコマンド実行:**\n```bash\ndewy server --registry ghr://owner/repo \\\n  --before-deploy-hook "echo \'Starting deployment\'" \\\n  --after-deploy-hook "echo \'Deployment completed\'" \\\n  -- /opt/myapp/current/myapp\n```\n\n**複数コマンドの連携:**\n```bash\ndewy server --registry ghr://owner/repo \\\n  --before-deploy-hook "systemctl stop nginx && backup-db.sh" \\\n  --after-deploy-hook "systemctl start nginx && send-notification.sh" \\\n  -- /opt/myapp/current/myapp\n```\n\n**スクリプトファイルの実行:**\n```bash\ndewy server --registry ghr://owner/repo \\\n  --before-deploy-hook "/opt/scripts/pre-deploy.sh" \\\n  --after-deploy-hook "/opt/scripts/post-deploy.sh" \\\n  -- /opt/myapp/current/myapp\n```\n\n## 実用的なユースケース {% #use-cases %}\n\n### データベース操作 {% #database-operations %}\n\n**バックアップの自動実行:**\n```bash\n# PostgreSQL バックアップ\n--before-deploy-hook "pg_dump myapp_db > /backup/myapp_$(date +%Y%m%d_%H%M%S).sql"\n\n# MySQL バックアップ\n--before-deploy-hook "mysqldump -u root -p myapp_db > /backup/myapp_$(date +%Y%m%d_%H%M%S).sql"\n```\n\n**マイグレーションの実行:**\n```bash\n# Rails マイグレーション\n--after-deploy-hook "cd /opt/myapp/current && bundle exec rake db:migrate"\n\n# Django マイグレーション\n--after-deploy-hook "cd /opt/myapp/current && python manage.py migrate"\n\n# Go マイグレーション（migrate ツール使用）\n--after-deploy-hook "migrate -path /opt/myapp/current/migrations -database \'postgres://...\' up"\n```\n\n### サービス管理 {% #service-management %}\n\n**関連サービスの制御:**\n```bash\n# Nginx の一時停止と再開\n--before-deploy-hook "systemctl stop nginx"\n--after-deploy-hook "systemctl start nginx && systemctl reload nginx"\n\n# ロードバランサーからの切り離し\n--before-deploy-hook "curl -X DELETE http://lb:8080/servers/$(hostname)"\n--after-deploy-hook "curl -X POST http://lb:8080/servers/$(hostname)"\n```\n\n**ヘルスチェックの実行:**\n```bash\n# アプリケーションの起動確認\n--after-deploy-hook "timeout 30 bash -c \'until curl -f http://localhost:8080/health; do sleep 1; done\'"\n\n# データベース接続確認\n--before-deploy-hook "pg_isready -h localhost -p 5432 -d myapp_db"\n```\n\n### 通知とモニタリング {% #notification-monitoring %}\n\n**外部システムへの通知:**\n```bash\n# Datadog へのデプロイイベント送信\n--after-deploy-hook "curl -X POST https://api.datadoghq.com/api/v1/events \\\n  -H \'DD-API-KEY: ${DD_API_KEY}\' \\\n  -d \'{\\"title\\":\\"Deployment\\",\\"text\\":\\"App deployed\\"}\'"\n\n# PagerDuty への通知\n--after-deploy-hook "scripts/notify-pagerduty.sh deployment-success"\n```\n\n**メトリクス収集:**\n```bash\n# デプロイ時間の記録\n--before-deploy-hook "echo $(date +%s) > /tmp/deploy_start"\n--after-deploy-hook "echo \'Deploy time: \'$(($(date +%s) - $(cat /tmp/deploy_start)))\'s\'"\n```\n\n### 設定とファイル管理 {% #configuration-management %}\n\n**設定ファイルの更新:**\n```bash\n# 環境固有の設定適用\n--after-deploy-hook "cp /opt/config/production.yml /opt/myapp/current/config.yml"\n\n# テンプレートから設定生成\n--after-deploy-hook "envsubst < /opt/templates/app.conf.template > /opt/myapp/current/app.conf"\n```\n\n**キャッシュのクリア:**\n```bash\n# Redis キャッシュクリア\n--after-deploy-hook "redis-cli FLUSHALL"\n\n# ファイルキャッシュクリア\n--after-deploy-hook "rm -rf /opt/myapp/current/tmp/cache/*"\n\n# CDN キャッシュ無効化\n--after-deploy-hook "curl -X POST \'https://api.cloudflare.com/client/v4/zones/${ZONE_ID}/purge_cache\' \\\n  -H \'Authorization: Bearer ${CF_TOKEN}\' -d \'{\\"purge_everything\\":true}\'"\n```\n\n## エラーハンドリングと復旧 {% #error-handling %}\n\n### Before Hook失敗時 {% #before-hook-failure %}\n\nBefore Hookが失敗した場合の動作：\n\n1. **デプロイの自動中止**: プロセス全体が停止\n2. **エラーログの記録**: 詳細な実行結果をログに出力\n3. **通知の送信**: 設定されている場合、エラー通知を送信\n4. **現在の状態維持**: 既存のアプリケーションは影響を受けない\n\n**推奨される復旧手順:**\n```bash\n# 1. エラー原因の確認\ntail -f /var/log/dewy.log\n\n# 2. 手動でのフック実行テスト\n/bin/sh -c "your-before-hook-command"\n\n# 3. 問題修正後のデプロイ再試行\n# Dewyは次回のポーリングで自動的に再試行\n```\n\n### After Hook失敗時 {% #after-hook-failure %}\n\nAfter Hookが失敗した場合の動作：\n\n1. **デプロイは成功として処理**: アプリケーションは新バージョンで稼働\n2. **エラーログの記録**: 失敗内容を詳細にログ出力\n3. **通知の送信**: 設定されている場合、警告通知を送信\n4. **手動対応の推奨**: 管理者による確認と対応が必要\n\n**推奨される対応手順:**\n```bash\n# 1. 新バージョンの動作確認\ncurl -f http://localhost:8080/health\n\n# 2. After Hookの手動実行\n/bin/sh -c "your-after-hook-command"\n\n# 3. 必要に応じて手動での後処理実行\n```\n\n## セキュリティ考慮事項 {% #security %}\n\n### 権限管理 {% #permission-management %}\n\n**実行ユーザーの権限設定:**\n```bash\n# Dewyを専用ユーザーで実行\nsudo useradd -r -s /bin/bash dewy\nsudo chown -R dewy:dewy /opt/myapp\n\n# 必要最小限の権限でサービス定義\n# /etc/systemd/system/dewy.service\n[Service]\nUser=dewy\nGroup=dewy\n```\n\n**sudo使用時の注意点:**\n```bash\n# ❌ 危険：パスワードプロンプトでハング\n--before-deploy-hook "sudo systemctl stop nginx"\n\n# ✅ 安全：NOPASSWDまたは専用ユーザー権限設定\n--before-deploy-hook "systemctl stop nginx"  # systemd user session\n```\n\n### コマンドインジェクション対策 {% #injection-prevention %}\n\n**安全なコマンド記述:**\n```bash\n# ✅ 安全：クォートによる保護\n--before-deploy-hook "backup-db.sh --name \'myapp_backup\'"\n\n# ❌ 危険：環境変数の直接展開\n--before-deploy-hook "echo $USER_INPUT"\n\n# ✅ 安全：環境変数の適切な使用\n--before-deploy-hook "scripts/safe-command.sh"  # スクリプト内で適切に処理\n```\n\n**推奨される実装パターン:**\n```bash\n#!/bin/bash\n# scripts/safe-backup.sh\nset -euo pipefail\n\nDB_NAME="${DB_NAME:-myapp}"\nBACKUP_DIR="${BACKUP_DIR:-/backup}"\nTIMESTAMP=$(date +%Y%m%d_%H%M%S)\n\npg_dump "${DB_NAME}" > "${BACKUP_DIR}/backup_${TIMESTAMP}.sql"\n```\n\n## パフォーマンスと監視 {% #performance-monitoring %}\n\n### 実行時間の考慮 {% #execution-time %}\n\n**長時間実行コマンドの対策:**\n```bash\n# タイムアウト設定\n--before-deploy-hook "timeout 300 large-backup.sh"\n\n# バックグラウンド実行（注意：デプロイ完了を待たない）\n--after-deploy-hook "nohup long-running-task.sh &"\n\n# 非同期処理への委譲\n--after-deploy-hook "queue-job.sh heavy-processing"\n```\n\n### 監視とデバッグ {% #monitoring-debug %}\n\n**詳細ログの有効化:**\n```bash\n# デバッグレベルでの実行\ndewy server --log-format json --log-level debug \\\n  --registry ghr://owner/repo \\\n  --before-deploy-hook "verbose-script.sh"\n```\n\n**パフォーマンス測定:**\n```bash\n# 実行時間測定付きのフック\n--before-deploy-hook "time backup-database.sh"\n--after-deploy-hook "time validate-deployment.sh"\n```\n\n## 設定例とベストプラクティス {% #best-practices %}\n\n### 本番環境での推奨設定 {% #production-settings %}\n\n**安全なバックアップ戦略:**\n```bash\ndewy server --registry ghr://company/myapp \\\n  --before-deploy-hook "scripts/production-backup.sh" \\\n  --after-deploy-hook "scripts/production-validation.sh" \\\n  --notifier "slack://ops-alerts" \\\n  -- /opt/myapp/current/myapp\n```\n\n**production-backup.sh の例:**\n```bash\n#!/bin/bash\nset -euo pipefail\n\n# データベースバックアップ\npg_dump myapp_production > "/backup/pre-deploy-$(date +%Y%m%d_%H%M%S).sql"\n\n# 設定ファイルバックアップ\ncp /opt/myapp/current/config.yml "/backup/config-$(date +%Y%m%d_%H%M%S).yml"\n\n# ヘルスチェック\ncurl -f http://localhost:8080/health || exit 1\n\necho "Pre-deployment backup completed successfully"\n```\n\n### 開発・ステージング環境 {% #development-staging %}\n\n**開発効率重視の設定:**\n```bash\ndewy server --registry "ghr://company/myapp?pre-release=true" \\\n  --interval 30s \\\n  --before-deploy-hook "scripts/dev-prepare.sh" \\\n  --after-deploy-hook "scripts/dev-test.sh" \\\n  --notifier "slack://dev-deploys" \\\n  -- /opt/myapp/current/myapp\n```\n\n**自動テスト連携:**\n```bash\n#!/bin/bash\n# scripts/dev-test.sh\nset -euo pipefail\n\n# アプリケーション起動待機\nsleep 5\n\n# ヘルスチェック\ncurl -f http://localhost:8080/health\n\n# E2E テスト実行\ncd /opt/myapp/current && npm test\n\necho "Development validation completed"\n```\n\n## 高度な活用例 {% #advanced-usage %}\n\n### Blue-Green デプロイメント {% #blue-green %}\n\n**トラフィック切り替えの自動化:**\n```bash\n# Blue-Green切り替え用のフック設定\ndewy server --registry ghr://company/myapp \\\n  --before-deploy-hook "scripts/prepare-green.sh" \\\n  --after-deploy-hook "scripts/switch-to-green.sh" \\\n  -- /opt/myapp/current/myapp\n```\n\n**switch-to-green.sh の例:**\n```bash\n#!/bin/bash\nset -euo pipefail\n\n# Green環境のヘルスチェック\nfor i in {1..30}; do\n  if curl -f http://localhost:8081/health; then\n    break\n  fi\n  sleep 2\ndone\n\n# ロードバランサーの切り替え\ncurl -X POST http://lb:8080/switch-to-green\n\n# Blue環境の停止（遅延実行）\nsleep 30 && systemctl stop myapp-blue &\n\necho "Traffic switched to green environment"\n```\n\n### CI/CDパイプライン連携 {% #cicd-integration %}\n\n**GitHub Actions との連携:**\n```bash\n# デプロイ完了をGitHub Actionsに通知\n--after-deploy-hook "scripts/notify-github-actions.sh"\n```\n\n**notify-github-actions.sh の例:**\n```bash\n#!/bin/bash\nset -euo pipefail\n\n# GitHub の Deployment Status API を使用\ncurl -X POST \\\n  -H "Authorization: token ${GITHUB_TOKEN}" \\\n  -H "Accept: application/vnd.github.v3+json" \\\n  https://api.github.com/repos/owner/repo/deployments/${DEPLOYMENT_ID}/statuses \\\n  -d \'{"state":"success","description":"Deployed successfully via Dewy"}\'\n```\n\n## トラブルシューティング {% #troubleshooting %}\n\n### よくある問題 {% #common-issues %}\n\n**権限エラー:**\n```bash\n# 問題：Permission denied\n--before-deploy-hook "systemctl stop nginx"\n\n# 解決策：ユーザー権限の確認と調整\nsudo usermod -a -G sudo dewy\n# または\nsudo visudo  # NOPASSWDの設定\n```\n\n**パス問題:**\n```bash\n# 問題：command not found\n--after-deploy-hook "npm install"\n\n# 解決策：フルパスまたはPATH設定\n--after-deploy-hook "/usr/local/bin/npm install"\n# または\n--after-deploy-hook "PATH=/usr/local/bin:$PATH npm install"\n```\n\n**環境変数の問題:**\n```bash\n# 問題：Environment variable not found\n--before-deploy-hook "echo $CUSTOM_VAR"\n\n# 解決策：環境変数の事前設定確認\nsystemctl edit dewy.service\n# [Service]\n# Environment=CUSTOM_VAR=value\n```\n\n### デバッグ手法 {% #debugging %}\n\n**段階的な問題切り分け:**\n```bash\n# 1. シンプルなコマンドから開始\n--before-deploy-hook "echo \'Hook test\'"\n\n# 2. 段階的に複雑化\n--before-deploy-hook "echo \'Hook test\' && date"\n\n# 3. 実際のコマンド\n--before-deploy-hook "your-actual-command"\n```\n\n**手動実行での検証:**\n```bash\n# Dewyと同じ環境でテスト\ncd /opt/myapp\nsudo -u dewy /bin/sh -c "your-hook-command"\n```\n\n**ログ分析:**\n```bash\n# フック関連ログの抽出\njournalctl -u dewy.service | grep -i hook\n\n# JSON形式ログの解析\njournalctl -u dewy.service -o json | jq \'select(.msg | contains("hook"))\'\n```\n\n## 通知連携 {% #notification-integration %}\n\n### フック実行結果の自動通知 {% #hook-result-notification %}\n\nデプロイメントフックの実行結果は、設定された通知チャネル（Slack/Mail）に自動的に送信されます。\n\n**通知される情報:**\n- 実行されたコマンド\n- 実行結果（成功/失敗）\n- 標準出力・エラー出力\n- 実行時間\n- 終了コード\n\n### 通知設定との組み合わせ例 {% #notification-examples %}\n\n**Slack通知付きの設定:**\n```bash\ndewy server --registry ghr://owner/repo \\\n  --notifier "slack://deploy-channel?title=MyApp" \\\n  --before-deploy-hook "scripts/backup-database.sh" \\\n  --after-deploy-hook "scripts/validate-deployment.sh" \\\n  -- /opt/myapp/current/myapp\n```\n\n**Mail通知付きの設定:**\n```bash\ndewy server --registry ghr://owner/repo \\\n  --notifier "mail://smtp.company.com:587/ops@company.com" \\\n  --before-deploy-hook "scripts/pre-deploy-check.sh" \\\n  --after-deploy-hook "scripts/post-deploy-report.sh" \\\n  -- /opt/myapp/current/myapp\n```\n\n{% callout type="note" %}\n通知チャネルの詳細な設定方法については、[通知](/ja/notifier)ドキュメントを参照してください。\n{% /callout %}\n\n## 関連項目 {% #related %}\n\n- [アーキテクチャ](/ja/architecture) - デプロイプロセス全体でのフックの位置づけ\n- [通知](/ja/notifier) - 通知チャネルの詳細設定（Slack/Mail）\n- [バージョニング](/ja/versioning) - デプロイトリガーとしてのバージョン検出\n- [FAQ](/ja/faq) - デプロイメントフック関連のよくある質問'),h=s.Ay.parse(d,{slots:!1}),y=h.attributes.frontmatter?r.Ay.load(h.attributes.frontmatter):{},{components:u}=(0,a._)(c);var m=!0;let b={frontmatter:y};function f(n){let e=n.markdoc;return s.ZR.react(e.content,t,{components:{...u,...n.components}})}},8814:(n,e,o)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/ja/deployment-hooks",function(){return o(7584)}])}},n=>{n.O(0,[849,454,636,593,792],()=>n(n.s=8814)),_N_E=n.O()}]);