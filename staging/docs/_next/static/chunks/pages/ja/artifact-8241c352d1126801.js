(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[428],{1930:(n,a,t)=>{"use strict";t.r(a),t.d(a,{includes:()=>e,upper:()=>r});let e={transform(n){let[a,t]=Object.values(n);return!!Array.isArray(a)&&a.includes(t)}},r={transform(n){let a=n[0];return"string"==typeof a?a.toUpperCase():a}}},2665:(n,a,t)=>{"use strict";t.r(a),t.d(a,{callout:()=>e});let e={render:t(9499).Pq,children:["paragraph","tag","list"],attributes:{type:{type:String,default:"note",matches:["tip","note","important","warning","caution"],errorLevel:"critical"},title:{type:String}}}},3930:(n,a,t)=>{"use strict";t.r(a),t.d(a,{fence:()=>s,heading:()=>i,table:()=>p});var e=t(3854),r=t(9499);let s={render:r.NG,attributes:e.a9.fence.attributes},i={render:r.DZ,children:["inline"],attributes:{id:{type:String},level:{type:Number,required:!0,default:1},className:{type:String}},transform(n,a){let t=n.transformAttributes(a),r=n.transformChildren(a),s=t.id&&"string"==typeof t.id?t.id:r.filter(n=>"string"==typeof n).join(" ").replace(/[?]/g,"").replace(/\s+/g,"-").toLowerCase();return new e.vw(this.render,{...t,id:s},r)}},p={render:r.XI,attributes:e.a9.table.attributes}},6254:(n,a,t)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/ja/artifact",function(){return t(8144)}])},8144:(n,a,t)=>{"use strict";t.r(a),t.d(a,{__N_SSG:()=>c,default:()=>w,markdoc:()=>y});var e=t(4232),r=t(3423),s=t(3854),i=t(9146),p=t(2665),m=t(3930),o=t(1930);let _={tags:(0,i.X)(p),nodes:(0,i.X)(m),functions:(0,i.X)(o),...(0,i.X)({})},l=new s.Ay.Tokenizer({allowComments:!0}).tokenize('---\ntitle: アーティファクト\ndescription: |\n  アーティファクトは、実際のアプリケーションバイナリやファイルを管理するDewyのコンポーネントです。\n  レジストリで特定されたバージョンに対応するファイルをダウンロードし、デプロイメント用に準備します。\n---\n\n# {% $markdoc.frontmatter.title %} {% #overview %}\n\n{% $markdoc.frontmatter.description %}\n\n## アーティファクトの種類\n\nDewyは以下のアーティファクトタイプに対応しています。\n\n- **GitHub Releases** (`ghr://`): GitHubリリースの添付ファイル\n- **AWS S3** (`s3://`): S3オブジェクトストレージのファイル\n- **Google Cloud Storage** (`gs://`): GCSオブジェクトストレージのファイル\n\nアーティファクトの種類は自動的にレジストリのタイプと連動します。\n\n## ファイル形式\n\n### 対応アーカイブ形式\n\nDewyは以下のアーカイブ形式をサポートしています。\n\n- **tar.gz / tgz**: 最も一般的な形式\n- **tar**: 非圧縮tar\n- **zip**: Windows環境でよく使用される形式\n\n### アーカイブ構造\n\nアーティファクトは以下のような構造で作成することを推奨します：\n\n```\nmyapp_linux_amd64.tar.gz\n├── myapp                 # 実行可能バイナリ\n├── config/\n│   └── app.conf         # 設定ファイル\n├── static/\n│   ├── css/\n│   └── js/\n└── README.md\n```\n\n## ファイル命名規則\n\nアーティファクト名を明示的に指定しない場合、Dewyは以下のパターンでファイルを自動選択します：\n\n```bash\n# 推奨パターン\n<app-name>_<os>_<arch>.<ext>\n\n# 例\nmyapp_linux_amd64.tar.gz\nmyapp_darwin_arm64.tar.gz\nmyapp_windows_amd64.zip\n```\n\n### OS識別子\n\n{% table %}\n* OS\n* 識別子\n* 例\n---\n* Linux\n* `linux`\n* `myapp_linux_amd64.tar.gz`\n---\n* macOS\n* `darwin`, `macos`\n* `myapp_darwin_arm64.tar.gz`\n---\n* Windows\n* `windows`, `win`\n* `myapp_windows_amd64.zip`\n{% /table %}\n\n### アーキテクチャ識別子\n\n{% table %}\n* アーキテクチャ\n* 識別子\n* 例\n---\n* x86_64\n* `amd64`, `x86_64`\n* `myapp_linux_amd64.tar.gz`\n---\n* ARM64\n* `arm64`, `aarch64`\n* `myapp_darwin_arm64.tar.gz`\n---\n* ARM32\n* `arm`, `armv7`\n* `myapp_linux_arm.tar.gz`\n{% /table %}\n\n## GitHub Releases でのアーティファクト\n\n基本的な構成\n\n```bash\n# レジストリURL\nghr://owner/repo\n\n# 自動選択される例（Linux amd64環境の場合）\nmyapp_linux_amd64.tar.gz\n```\n\n### リリース作成例\n\nGitHub Actionsでのリリース作成とアーティファクト添付：\n\n```yaml\nname: Release\non:\n  push:\n    tags: [\'v*\']\n\njobs:\n  build:\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        include:\n          - os: ubuntu-latest\n            goos: linux\n            goarch: amd64\n          - os: macos-latest\n            goos: darwin\n            goarch: arm64\n          - os: windows-latest\n            goos: windows\n            goarch: amd64\n\n    runs-on: ${{ matrix.os }}\n    steps:\n      - uses: actions/checkout@v4\n      \n      - name: Setup Go\n        uses: actions/setup-go@v4\n        with:\n          go-version: \'1.21\'\n      \n      - name: Build\n        env:\n          GOOS: ${{ matrix.goos }}\n          GOARCH: ${{ matrix.goarch }}\n        run: |\n          go build -o myapp\n          tar -czf myapp_${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz myapp\n      \n      - name: Upload to release\n        uses: actions/upload-release-asset@v1\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          upload_url: ${{ steps.create_release.outputs.upload_url }}\n          asset_path: ./myapp_${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz\n          asset_name: myapp_${{ matrix.goos }}_${{ matrix.goarch }}.tar.gz\n          asset_content_type: application/gzip\n```\n\n### 特定アーティファクトの指定\n\n```bash\n# 複数のアーティファクトがある場合に特定のものを指定\ndewy server --registry "ghr://owner/repo?artifact=myapp-server.tar.gz"\n```\n\n## AWS S3 でのアーティファクト\n\nディレクトリ構造\n\n```\ns3://my-bucket/releases/myapp/\n├── v1.2.3/\n│   ├── myapp_linux_amd64.tar.gz\n│   ├── myapp_linux_arm64.tar.gz\n│   ├── myapp_darwin_arm64.tar.gz\n│   └── myapp_windows_amd64.zip\n├── v1.2.2/\n│   ├── myapp_linux_amd64.tar.gz\n│   └── myapp_darwin_arm64.tar.gz\n└── v1.2.1/\n    └── myapp_linux_amd64.tar.gz\n```\n\n### アップロード例\n\n```bash\n# AWS CLIを使用したアップロード\naws s3 cp myapp_linux_amd64.tar.gz \\\n  s3://my-bucket/releases/myapp/v1.2.3/myapp_linux_amd64.tar.gz\n\n# GitHub Actionsでの自動アップロード\n- name: Upload to S3\n  env:\n    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n  run: |\n    aws s3 cp myapp_linux_amd64.tar.gz \\\n      s3://my-bucket/releases/myapp/${GITHUB_REF_NAME}/\n```\n\n## Google Cloud Storage でのアーティファクト\n\nディレクトリ構造\n\n```\ngs://my-releases/myapp/\n├── v1.2.3/\n│   ├── myapp_linux_amd64.tar.gz\n│   ├── myapp_linux_arm64.tar.gz\n│   └── myapp_darwin_arm64.tar.gz\n└── v1.2.2/\n    └── myapp_linux_amd64.tar.gz\n```\n\n### アップロード例\n\n```bash\n# gsutil を使用したアップロード\ngsutil cp myapp_linux_amd64.tar.gz \\\n  gs://my-releases/myapp/v1.2.3/\n\n# GitHub Actionsでの自動アップロード\n- name: Upload to GCS\n  uses: google-github-actions/setup-gcloud@v1\n  with:\n    service_account_key: ${{ secrets.GCP_SA_KEY }}\n    \n- name: Upload artifact\n  run: |\n    gsutil cp myapp_linux_amd64.tar.gz \\\n      gs://my-releases/myapp/${GITHUB_REF_NAME}/\n```\n\n## アーティファクトの検証\n\nアーティファクトの整合性を確保するため、チェックサムファイルを併せて配置することを推奨します。\n\n```bash\n# SHA256チェックサムの生成\nsha256sum myapp_linux_amd64.tar.gz > myapp_linux_amd64.tar.gz.sha256\n\n# アップロード（GitHub Releasesの例）\n# - myapp_linux_amd64.tar.gz\n# - myapp_linux_amd64.tar.gz.sha256\n```\n\nセキュリティを重視する環境では、GPG署名を併せて提供することも可能です。\n\n```bash\n# GPG署名の生成\ngpg --detach-sign --armor myapp_linux_amd64.tar.gz\n\n# 結果\n# - myapp_linux_amd64.tar.gz\n# - myapp_linux_amd64.tar.gz.asc\n```\n\n## トラブルシューティング\n\n### アーティファクトが見つからない\n\n命名規則の確認をする。\n\n```bash\n# 正しい例\nmyapp_linux_amd64.tar.gz\n\n# 認識されない例\nmyapp-1.2.3.tar.gz\nlinux-binary.tar.gz\n```\n\nファイルの存在確認をする。\n\n```bash\n# GitHub Releasesでの確認\ncurl -H "Authorization: token $GITHUB_TOKEN" \\\n  "https://api.github.com/repos/owner/repo/releases/latest"\n```\n\n### 展開エラー\n\nアーカイブ形式の確認をする。\n\n```bash\n# ファイル形式の確認\nfile myapp_linux_amd64.tar.gz\n\n# 手動展開テスト\ntar -tzf myapp_linux_amd64.tar.gz\n```\n\n権限の確認をする。\n\n```bash\n# 実行権限の設定\nchmod +x myapp\n```\n\n### デバッグ方法\n\n```bash\n# アーティファクトダウンロードのデバッグ\ndewy server --registry ghr://owner/repo --log-level debug\n\n# 特定アーティファクトの指定でテスト\ndewy server --registry "ghr://owner/repo?artifact=specific-file.tar.gz"\n```\n\nアーティファクト管理は Dewy のデプロイメントプロセスにおいて重要な要素です。適切な命名規則と構造化されたファイル配置により、自動デプロイメントを実現できます。'),u=s.Ay.parse(l,{slots:!1}),g=u.attributes.frontmatter?r.Ay.load(u.attributes.frontmatter):{},{components:d}=(0,i._)(_);var c=!0;let y={frontmatter:g};function w(n){let a=n.markdoc;return s.ZR.react(a.content,e,{components:{...d,...n.components}})}}},n=>{n.O(0,[849,454,636,593,792],()=>n(n.s=6254)),_N_E=n.O()}]);