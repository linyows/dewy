(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[510],{1930:(e,t,n)=>{"use strict";n.r(t),n.d(t,{includes:()=>r,upper:()=>a});let r={transform(e){let[t,n]=Object.values(e);return!!Array.isArray(t)&&t.includes(n)}},a={transform(e){let t=e[0];return"string"==typeof t?t.toUpperCase():t}}},2665:(e,t,n)=>{"use strict";n.r(t),n.d(t,{callout:()=>r});let r={render:n(9499).Pq,children:["paragraph","tag","list"],attributes:{type:{type:String,default:"note",matches:["tip","note","important","warning","caution"],errorLevel:"critical"},title:{type:String}}}},3930:(e,t,n)=>{"use strict";n.r(t),n.d(t,{fence:()=>s,heading:()=>o,table:()=>i});var r=n(3854),a=n(9499);let s={render:a.NG,attributes:r.a9.fence.attributes},o={render:a.DZ,children:["inline"],attributes:{id:{type:String},level:{type:Number,required:!0,default:1},className:{type:String}},transform(e,t){let n=e.transformAttributes(t),a=e.transformChildren(t),s=n.id&&"string"==typeof n.id?n.id:a.filter(e=>"string"==typeof e).join(" ").replace(/[?]/g,"").replace(/\s+/g,"-").toLowerCase();return new r.vw(this.render,{...n,id:s},a)}},i={render:a.XI,attributes:r.a9.table.attributes}},7022:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__N_SSG:()=>g,default:()=>f,markdoc:()=>b});var r=n(4232),a=n(3423),s=n(3854),o=n(9146),i=n(2665),p=n(3930),l=n(1930);let u={tags:(0,o.X)(i),nodes:(0,o.X)(p),functions:(0,o.X)(l),...(0,o.X)({})},c=new s.Ay.Tokenizer({allowComments:!0}).tokenize("---\ntitle: 使ってみよう\n---\n\n# {% $markdoc.frontmatter.title %} {% #overview %}\n\nDewyを使って実際にアプリケーションをデプロイしてみましょう。この記事では、基本的な使い方から実際のデプロイメントまでを順を追って説明します。\n\n## 前提条件\n\n- Dewyがインストールされていること（[インストールガイド](/ja/installation)参照）\n- デプロイしたいGoアプリケーションがGitHub Releasesで公開されていること\n- 必要な環境変数が設定されていること\n\n## 基本的な使い方\n\n### サーバーアプリケーションのデプロイ\n\nGitHub Releasesからサーバープリケーションを自動デプロイする例：\n\n```bash\n# 環境変数を設定\nexport GITHUB_TOKEN=your_github_token\n\n# サーバーアプリケーションを起動\ndewy server --registry ghr://owner/repo --port 8000 -- /opt/myapp/current/myapp\n```\n\nこの例では：\n- `ghr://owner/repo`: GitHub ReleasesのレジストリURL\n- `--port 8000`: アプリケーションが使用するポート\n- `/opt/myapp/current/myapp`: 実行するアプリケーションのパス\n\n### 静的アセットのデプロイ\n\nHTMLやCSS、JavaScriptファイルなどの静的ファイルをデプロイする場合：\n\n```bash\ndewy assets --registry ghr://owner/frontend-assets\n```\n\n## 実際のデプロイ例\n\n### GitHub Releasesを使った例\n\n```bash\n# GitHub Personal Access Tokenを設定\nexport GITHUB_TOKEN=ghp_xxxxxxxxxxxxxxxxxxxx\n\n# アプリケーションディレクトリを作成\nsudo mkdir -p /opt/myapp\nsudo chown $USER:$USER /opt/myapp\ncd /opt/myapp\n\n# Dewyを起動してサーバーアプリケーションをデプロイ\ndewy server \\\n  --registry ghr://myorg/myapp \\\n  --port 8080 \\\n  --log-level info \\\n  -- /opt/myapp/current/myapp\n```\n"),d=s.Ay.parse(c,{slots:!1}),y=d.attributes.frontmatter?a.Ay.load(d.attributes.frontmatter):{},{components:m}=(0,o._)(u);var g=!0;let b={frontmatter:y};function f(e){let t=e.markdoc;return s.ZR.react(t.content,r,{components:{...m,...e.components}})}},7798:(e,t,n)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/ja/getting-started",function(){return n(7022)}])}},e=>{e.O(0,[849,454,636,593,792],()=>e(e.s=7798)),_N_E=e.O()}]);