(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[520],{558:(n,e,r)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/ja/notifier",function(){return r(5516)}])},1930:(n,e,r)=>{"use strict";r.r(e),r.d(e,{includes:()=>t,upper:()=>o});let t={transform(n){let[e,r]=Object.values(n);return!!Array.isArray(e)&&e.includes(r)}},o={transform(n){let e=n[0];return"string"==typeof e?e.toUpperCase():e}}},2665:(n,e,r)=>{"use strict";r.r(e),r.d(e,{callout:()=>t});let t={render:r(9499).Pq,children:["paragraph","tag","list"],attributes:{type:{type:String,default:"note",matches:["tip","note","important","warning","caution"],errorLevel:"critical"},title:{type:String}}}},3930:(n,e,r)=>{"use strict";r.r(e),r.d(e,{fence:()=>i,heading:()=>s,table:()=>a});var t=r(3854),o=r(9499);let i={render:o.NG,attributes:t.a9.fence.attributes},s={render:o.DZ,children:["inline"],attributes:{id:{type:String},level:{type:Number,required:!0,default:1},className:{type:String}},transform(n,e){let r=n.transformAttributes(e),o=n.transformChildren(e),i=r.id&&"string"==typeof r.id?r.id:o.filter(n=>"string"==typeof n).join(" ").replace(/[?]/g,"").replace(/\s+/g,"-").toLowerCase();return new t.vw(this.render,{...r,id:i},o)}},a={render:o.XI,attributes:t.a9.table.attributes}},5516:(n,e,r)=>{"use strict";r.r(e),r.d(e,{__N_SSG:()=>u,default:()=>w,markdoc:()=>h});var t=r(4232),o=r(3423),i=r(3854),s=r(9146),a=r(2665),p=r(3930),l=r(1930);let c={tags:(0,s.X)(a),nodes:(0,s.X)(p),functions:(0,s.X)(l),...(0,s.X)({})},m=new i.Ay.Tokenizer({allowComments:!0}).tokenize('---\ntitle: 通知\ndescription: |\n  通知機能は、デプロイメントの状況をチームに自動で伝えるDewyのコンポーネントです。\n  成功・失敗・フック実行結果など、様々なイベントをSlackやメールで通知できます。\n---\n\n# {% $markdoc.frontmatter.title %} {% #overview %}\n\n{% $markdoc.frontmatter.description %}\n\n## 対応通知方法\n\nDewyは以下の通知方法に対応しています。\n\n- **Slack** (`slack://`): Slackチャンネルへの通知\n- **Mail** (`mail://`, `smtp://`): SMTP経由でのメール通知\n\n## 通知のタイミング\n\nDewyは以下のタイミングで通知を送信します：\n\n- **開始時**: Dewyサービスの開始\n- **ダウンロード完了**: 新しいアーティファクトのダウンロード\n- **デプロイ成功**: アプリケーションの起動・再起動成功\n- **エラー発生**: 各種エラーの発生\n- **フック実行**: Before/Afterフックの実行結果\n- **停止時**: Dewyサービスの停止\n\n## Slack通知\n\n基本設定\n\n```bash\n# 基本形式\nslack://<channel-name>\n\n# 例\ndewy server --registry ghr://owner/repo \\\n  --notifier slack://deployments \\\n  -- /opt/myapp/current/myapp\n```\n\n環境変数\n\n```bash\n# Slack Bot Token（必須）\nexport SLACK_TOKEN=xoxb-xxxxxxxxxxxxxxxxxxxxx\n```\n\n### Slack Appの設定\n\n1. Slack Appの作成\n   - [https://api.slack.com/apps](https://api.slack.com/apps) でアプリを作成\n2. 必要な権限（Scopes）\n   - `channels:join`: チャンネルへの参加\n   - `chat:write`: メッセージの投稿\n3. トークンの取得\n   - OAuth & Permissions → Bot User OAuth Token\n\n### オプション付きの設定\n\n```bash\n# タイトル付き通知\ndewy server --registry ghr://owner/repo \\\n  --notifier "slack://deployments?title=MyApp"\n\n# URL付き通知（リポジトリへのリンク等）\ndewy server --registry ghr://owner/repo \\\n  --notifier "slack://deployments?title=MyApp&url=https://github.com/owner/repo"\n\n# 複数オプション\ndewy server --registry ghr://owner/repo \\\n  --notifier "slack://prod-deploy?title=MyApp&url=https://myapp.example.com"\n```\n\n### 通知内容例\n\n```\n\uD83D\uDE80 Automatic shipping started by Dewy (v1.2.3: server)\n\n✅ Downloaded artifact for v1.2.3\n\n\uD83D\uDD04 Server restarted for v1.2.3\n\n❌ Deploy failed: connection timeout\n```\n\n## メール通知\n\n基本設定\n\n```bash\n# 基本形式\nmail://<smtp-host>:<port>/<recipient>\n# または\nsmtp://<smtp-host>:<port>/<recipient>\n\n# 例\ndewy server --registry ghr://owner/repo \\\n  --notifier mail://smtp.gmail.com:587/admin@example.com \\\n  -- /opt/myapp/current/myapp\n```\n\n環境変数\n\n```bash\n# SMTP認証情報\nexport MAIL_USERNAME=sender@gmail.com\nexport MAIL_PASSWORD=app-specific-password\nexport MAIL_FROM=sender@gmail.com\n```\n\n### 設定オプション\n\n{% table %}\n* オプション\n* 型\n* 説明\n* デフォルト値\n---\n* `username`\n* string\n* SMTP認証ユーザー名\n* MAIL_USERNAME環境変数\n---\n* `password`\n* string\n* SMTP認証パスワード\n* MAIL_PASSWORD環境変数\n---\n* `from`\n* string\n* 送信者アドレス\n* MAIL_FROM環境変数またはusername\n---\n* `subject`\n* string\n* メール件名\n* "Dewy Notification"\n---\n* `tls`\n* bool\n* TLS暗号化の使用\n* true\n{% /table %}\n\n### URL形式での設定\n\n```bash\n# URLパラメータで全設定を指定\ndewy server --registry ghr://owner/repo \\\n  --notifier "mail://smtp.gmail.com:587/admin@example.com?username=sender@gmail.com&password=app-password&from=sender@gmail.com&subject=Deploy+Notification"\n```\n\n### Gmail での設定例\n\n```bash\n# 環境変数を使用\nexport MAIL_USERNAME=sender@gmail.com\nexport MAIL_PASSWORD=your-app-password\nexport MAIL_FROM=sender@gmail.com\n\n# Dewy実行\ndewy server --registry ghr://owner/repo \\\n  --notifier "mail://smtp.gmail.com:587/admin@example.com?subject=MyApp+Deploy"\n```\n\n{% callout type="important" %}\nGmailを使用する場合は、2要素認証を有効にしてアプリパスワードを生成する必要があります。\n通常のGoogleアカウントパスワードでは認証できません。\n{% /callout %}\n\n## エラー通知の制限\n\nDewyは連続するエラー通知を制限して、スパムを防止します。\n\n- **制限開始**: 連続3回のエラー後、通知を抑制\n- **制限解除**: 正常な動作に戻ると自動的に制限を解除\n- **制限中の動作**: ログは記録されるが通知は送信されない\n\n```bash\n# エラー通知制限の例\n# 1回目: ✉️ Error notification sent\n# 2回目: ✉️ Error notification sent  \n# 3回目: ✉️ Error notification sent\n# 4回目: \uD83D\uDCDD Error logged (notification suppressed)\n# 正常復旧: ✉️ Normal operation resumed, notification limit reset\n```\n\n## フック実行結果の通知\n\nデプロイフック（Before/After Deploy Hook）の実行結果も通知されます：\n\n### 成功時の通知例\n\n```\n\uD83E\uDE9D Before Deploy Hook Success\nCommand: pg_dump mydb > backup.sql\nDuration: 2.3s\nExit Code: 0\n```\n\n### 失敗時の通知例\n\n```\n❌ After Deploy Hook Failed\nCommand: systemctl reload nginx\nDuration: 0.1s\nExit Code: 1\nError: Unit nginx.service not found\n```\n\n## 複数環境での通知設定\n\n### 環境別チャンネル\n\n```bash\n# 本番環境\ndewy server --registry ghr://owner/repo \\\n  --notifier "slack://prod-deploy?title=MyApp+Production"\n\n# ステージング環境\ndewy server --registry "ghr://owner/repo?pre-release=true" \\\n  --notifier "slack://staging-deploy?title=MyApp+Staging"\n\n# 開発環境\ndewy server --registry "ghr://owner/repo?pre-release=true" \\\n  --notifier "slack://dev-deploy?title=MyApp+Development"\n```\n\n### systemdでの環境設定\n\n```ini\n# /etc/systemd/system/dewy-myapp-prod.service\n[Unit]\nDescription=Dewy - MyApp Production\n\n[Service]\nEnvironment=SLACK_TOKEN=xoxb-prod-token\nExecStart=/usr/local/bin/dewy server \\\n  --registry ghr://owner/repo \\\n  --notifier "slack://prod-deploy?title=MyApp+Prod" \\\n  -- /opt/myapp/current/myapp\n\n# /etc/systemd/system/dewy-myapp-staging.service\n[Unit]\nDescription=Dewy - MyApp Staging\n\n[Service]\nEnvironment=SLACK_TOKEN=xoxb-staging-token\nExecStart=/usr/local/bin/dewy server \\\n  --registry "ghr://owner/repo?pre-release=true" \\\n  --notifier "slack://staging-deploy?title=MyApp+Staging" \\\n  -- /opt/myapp/current/myapp\n```\n\n## トラブルシューティング\n\nSlack通知が届かない\n\n1. **トークンの確認**\n   ```bash\n   # トークンのテスト\n   curl -H "Authorization: Bearer $SLACK_TOKEN" \\\n     https://slack.com/api/auth.test\n   ```\n2. **権限の確認**\n   - Bot Token Scopesで `channels:join` と `chat:write` が設定されているか\n   - Appがワークスペースにインストールされているか\n3. **チャンネル名の確認**\n   ```bash\n   # パブリックチャンネルの場合は # を除く\n   # ❌ slack://#deployments\n   # ✅ slack://deployments\n   \n   # プライベートチャンネルの場合は事前にBotを招待\n   ```\n\nメール通知が送信されない\n\n1. **SMTP設定の確認**\n   ```bash\n   # SMTPサーバーへの接続テスト\n   telnet smtp.gmail.com 587\n   ```\n2. **認証情報の確認**\n   ```bash\n   # 環境変数の確認\n   echo $MAIL_USERNAME\n   echo $MAIL_FROM\n   # パスワードは表示しない\n   ```\n3. **TLS設定の確認**\n   ```bash\n   # TLSを無効にしてテスト（非推奨）\n   dewy server --registry ghr://owner/repo \\\n     --notifier "mail://smtp.example.com:25/admin@example.com?tls=false"\n   ```\n\n### デバッグ方法\n\n```bash\n# デバッグログで通知処理を確認\ndewy server --registry ghr://owner/repo \\\n  --notifier slack://test-channel \\\n  --log-level debug\n\n# 通知のみをテストする場合\ndewy server --registry ghr://linyows/dewy \\\n  --notifier slack://test-channel \\\n  --log-level info\n```\n\n## 実際の運用例\n\n### CI/CDパイプラインとの連携\n\n```yaml\n# GitHub Actions での通知設定\n- name: Deploy to Production\n  env:\n    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n    SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}\n  run: |\n    dewy server \\\n      --registry ghr://${{ github.repository }} \\\n      --notifier "slack://deployments?title=${{ github.repository }}&url=https://github.com/${{ github.repository }}" \\\n      -- /opt/app/current/app\n```\n\n### 監視システムとの連携\n\n```bash\n# Datadogなどの監視システムとSlack通知の併用\ndewy server --registry ghr://owner/repo \\\n  --notifier "slack://ops-alerts?title=MyApp+Production" \\\n  --after-deploy-hook "curl -X POST https://api.datadoghq.com/api/v1/events ..." \\\n  -- /opt/myapp/current/myapp\n```\n\n通知機能により、チーム全体でデプロイメント状況を共有し、問題の早期発見と対応が可能になります。適切な通知設定で、効率的な運用体制を構築してください。'),y=i.Ay.parse(m,{slots:!1}),d=y.attributes.frontmatter?o.Ay.load(y.attributes.frontmatter):{},{components:g}=(0,s._)(c);var u=!0;let h={frontmatter:d};function w(n){let e=n.markdoc;return i.ZR.react(e.content,t,{components:{...g,...n.components}})}}},n=>{n.O(0,[849,454,636,593,792],()=>n(n.s=558)),_N_E=n.O()}]);