(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[498],{1930:(n,e,r)=>{"use strict";r.r(e),r.d(e,{includes:()=>t,upper:()=>a});let t={transform(n){let[e,r]=Object.values(n);return!!Array.isArray(e)&&e.includes(r)}},a={transform(n){let e=n[0];return"string"==typeof e?e.toUpperCase():e}}},2665:(n,e,r)=>{"use strict";r.r(e),r.d(e,{callout:()=>t});let t={render:r(9499).Pq,children:["paragraph","tag","list"],attributes:{type:{type:String,default:"note",matches:["tip","note","important","warning","caution"],errorLevel:"critical"},title:{type:String}}}},3930:(n,e,r)=>{"use strict";r.r(e),r.d(e,{fence:()=>s,heading:()=>i,table:()=>o});var t=r(3854),a=r(9499);let s={render:a.NG,attributes:t.a9.fence.attributes},i={render:a.DZ,children:["inline"],attributes:{id:{type:String},level:{type:Number,required:!0,default:1},className:{type:String}},transform(n,e){let r=n.transformAttributes(e),a=n.transformChildren(e),s=r.id&&"string"==typeof r.id?r.id:a.filter(n=>"string"==typeof n).join(" ").replace(/[?]/g,"").replace(/\s+/g,"-").toLowerCase();return new t.vw(this.render,{...r,id:s},a)}},o={render:a.XI,attributes:t.a9.table.attributes}},4298:(n,e,r)=>{"use strict";r.r(e),r.d(e,{__N_SSG:()=>d,default:()=>h,markdoc:()=>v});var t=r(4232),a=r(3423),s=r(3854),i=r(9146),o=r(2665),l=r(3930),p=r(1930);let g={tags:(0,i.X)(o),nodes:(0,i.X)(l),functions:(0,i.X)(p),...(0,i.X)({})},y=new s.Ay.Tokenizer({allowComments:!0}).tokenize('---\ntitle: バージョニング\ndescription: |\n  Dewyは、セマンティックバージョニングに基づいてアプリケーションの最新バージョンを自動検出し、\n  継続的なデプロイメントを実現します。プリリリース版の管理も含めた包括的なバージョン管理機能を提供します。\n---\n\n# {% $markdoc.frontmatter.title %} {% #overview %}\n\n{% $markdoc.frontmatter.description %}\n\n## 概要 {% #overview-details %}\n\nDewyにおけるバージョニングは、プル型デプロイメントの中核となる機能です。レジストリから取得したバージョン情報を基に、現在実行中のバージョンと比較して新しいバージョンが利用可能かを自動判定し、必要に応じて自動デプロイを実行します。\n\n**主な特徴:**\n- セマンティックバージョニング（SemVer）の完全サポート\n- プリリリース版の柔軟な管理\n- 複数のバージョン形式に対応（`v1.2.3` / `1.2.3`）\n- 環境別のバージョン戦略をサポート\n\n## セマンティックバージョニング基礎 {% #semantic-versioning %}\n\n### バージョン形式 {% #version-format %}\n\nDewyは、[Semantic Versioning 2.0.0](https://semver.org/lang/ja/)に準拠したバージョン管理をサポートします。\n\n**基本形式:**\n```\nMAJOR.MINOR.PATCH\n```\n\n**例:**\n- `1.2.3` - バージョン1.2.3\n- `v1.2.3` - vプレフィックス付きバージョン1.2.3\n- `2.0.0` - メジャーバージョン2.0.0\n\n### バージョン番号の意味\n\n{% table %}\n* 種類\n* 説明\n* インクリメント条件\n---\n* MAJOR\n* 後方互換性のない変更\n* APIの破壊的変更、アーキテクチャ刷新\n---\n* MINOR\n* 後方互換性のある機能追加\n* 新機能追加、既存機能の拡張\n---\n* PATCH\n* 後方互換性のあるバグ修正\n* バグ修正、セキュリティ修正\n{% /table %}\n\n### プリリリースバージョン {% #pre-release %}\n\nプリリリースバージョンは、正式リリース前のテストや評価を目的としたバージョンです。\n\n**形式:**\n```\nMAJOR.MINOR.PATCH-<pre-release-identifier>\n```\n\n**よくあるパターン:**\n- `v1.2.3-alpha` - アルファ版（初期テスト）\n- `v1.2.3-beta.1` - ベータ版第1版（機能完成版のテスト）\n- `v1.2.3-rc.1` - リリース候補第1版（最終確認版）\n\n{% callout type="note" title="プリリリース版の優先順位" %}\nプリリリース版は、同じMAJOR.MINOR.PATCHの正式版よりも低い優先度として扱われます。\n例：`v1.2.3-rc.1 < v1.2.3`\n{% /callout %}\n\n## Dewyのバージョン検出アルゴリズム {% #version-detection %}\n\n### バージョン比較規則 {% #comparison-rules %}\n\nDewyは独自のセマンティックバージョン比較アルゴリズムを実装しています：\n\n1. **MAJOR版の比較** - 数値として比較し、大きい方を優先\n2. **MINOR版の比較** - MAJOR版が同じ場合、数値として比較\n3. **PATCH版の比較** - MAJOR.MINORが同じ場合、数値として比較\n4. **プリリリース版の処理**:\n   - 正式版 > プリリリース版\n   - プリリリース版同士は文字列比較\n\n### 最新バージョンの決定 {% #latest-version %}\n\nレジストリから取得したすべてのバージョンタグに対して：\n\n```go\n// 擬似コード\nfunc findLatest(versions []string, allowPreRelease bool) string {\n    validVersions := filterValidSemVer(versions, allowPreRelease)\n    return findMaxVersion(validVersions)\n}\n```\n\n**処理フロー:**\n1. セマンティックバージョン形式の検証\n2. プリリリース設定による フィルタリング\n3. 数値による比較とソート\n4. 最大値の選択\n\n## レジストリ別バージョン管理 {% #registry-versioning %}\n\n### GitHub Releases {% #github-releases %}\n\nGitHubリリースのタグ名から自動的にバージョンを検出します。\n\n```bash\n# 安定版のみ（デフォルト）\ndewy server --registry ghr://owner/repo\n\n# プリリリース版を含む\ndewy server --registry "ghr://owner/repo?pre-release=true"\n```\n\n**グレースピリオドの考慮:**\n\n{% callout type="important" title="CI/CD対応" %}\nGitHub Actionsなどでリリース作成後、アーティファクトのビルドと配置に時間がかかる場合があります。\nDewyは新しいリリースについては30分間のグレースピリオドを設け、この間は「アーティファクトが見つからない」エラーを通知しません。\n{% /callout %}\n\n### AWS S3 {% #aws-s3 %}\n\nS3のオブジェクトパス構造からバージョンを抽出します。\n\n**必須パス構造:**\n```\n<path-prefix>/<semver>/<artifact>\n```\n\n**設定例:**\n```bash\ndewy server --registry "s3://ap-northeast-1/releases/myapp?pre-release=true"\n```\n\n**S3内の配置例:**\n```\nreleases/myapp/v1.2.4/myapp_linux_amd64.tar.gz\nreleases/myapp/v1.2.4/myapp_darwin_arm64.tar.gz\nreleases/myapp/v1.2.3/myapp_linux_amd64.tar.gz\nreleases/myapp/v1.2.3-rc.1/myapp_linux_amd64.tar.gz\n```\n\n### Google Cloud Storage {% #google-cloud-storage %}\n\nGoogle Cloud StorageもS3と同様のパス構造でバージョン管理を行います。\n\n```bash\ndewy server --registry "gs://my-bucket/releases/myapp?pre-release=false"\n```\n\n### gRPC {% #grpc %}\n\ngRPCレジストリでは、サーバー側でバージョン情報を管理します。\n\n```bash\ndewy server --registry "grpc://registry-server:9000"\n```\n\n{% callout type="note" %}\ngRPCレジストリでは`pre-release`オプションは使用できません。サーバー側の実装に依存します。\n{% /callout %}\n\n## 環境別バージョン戦略 {% #environment-strategies %}\n\n### 本番環境 {% #production %}\n\n**推奨設定:**\n```bash\n# 安定版のみを自動デプロイ\ndewy server --registry ghr://company/myapp \\\n  --interval 300s \\\n  --log-format json -- /opt/myapp/current/myapp\n```\n\n**特徴:**\n- プリリリース版は除外（`pre-release=false`）\n- 長めのポーリング間隔でシステム負荷を軽減\n- 構造化ログでモニタリングしやすさを優先\n\n### ステージング環境 {% #staging %}\n\n**推奨設定:**\n```bash\n# プリリリース版も含めて早期テスト\ndewy server --registry "ghr://company/myapp?pre-release=true" \\\n  --interval 60s \\\n  --notifier "slack://staging-deploy?title=MyApp+Staging" \\\n  -- /opt/myapp/current/myapp\n```\n\n**特徴:**\n- プリリリース版を積極的に取り込み\n- 短いポーリング間隔で迅速なフィードバック\n- デプロイ通知でチーム全体に共有\n\n### 開発環境 {% #development %}\n\n**推奨設定:**\n```bash\n# 最新の開発版を即座に反映\ndewy server --registry "ghr://company/myapp?pre-release=true" \\\n  --interval 30s \\\n  --log-format text -- ./current/myapp\n```\n\n## バージョン管理のベストプラクティス {% #best-practices %}\n\n### タグ付けルール {% #tagging-rules %}\n\n**推奨するタグ命名規則:**\n\n```bash\n# 正式リリース\ngit tag v1.2.3\ngit tag v2.0.0\n\n# プリリリース\ngit tag v1.3.0-alpha\ngit tag v1.3.0-beta.1\ngit tag v1.3.0-rc.1\n\n# セキュリティ修正\ngit tag v1.2.4  # 1.2.3のセキュリティ修正版\n```\n\n**避けるべきパターン:**\n```bash\n# ❌ セマンティックバージョニングに非準拠\ngit tag release-2024-03-15\ngit tag latest\ngit tag stable\n\n# ❌ 不規則な命名\ngit tag v1.2.3-SNAPSHOT\ngit tag 1.2.3-final\n```\n\n### リリース戦略 {% #release-strategy %}\n\n**段階的リリースパターン:**\n\n1. **alpha** - 内部開発者によるテスト\n2. **beta** - 限定ユーザーによるテスト\n3. **rc** (Release Candidate) - 本番環境に近い条件でのテスト\n4. **正式版** - 本番環境への展開\n\n**例:**\n```bash\nv2.1.0-alpha    → 開発環境\nv2.1.0-beta.1   → ステージング環境\nv2.1.0-rc.1     → ステージング環境（本番同等構成）\nv2.1.0          → 本番環境\n```\n\n## 設定例とパターン {% #configuration-patterns %}\n\n### CI/CDとの連携パターン {% #cicd-integration %}\n\n**GitHub Actions との連携例:**\n\n```yaml\n# .github/workflows/release.yml\nname: Release\non:\n  push:\n    tags: [\'v*\']\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Build and Release\n        run: |\n          make build\n          gh release create ${{ github.ref_name }} \\\n            --title "Release ${{ github.ref_name }}" \\\n            --generate-notes \\\n            dist/*\n```\n\n**ステージング環境での自動テスト:**\n\n```bash\n# プリリリース版を監視してE2Eテストを自動実行\ndewy server --registry "ghr://company/myapp?pre-release=true" \\\n  --after-deploy-hook "make e2e-test" \\\n  -- /opt/myapp/current/myapp\n```\n\n## トラブルシューティング {% #troubleshooting %}\n\n### よくある問題と解決方法 {% #common-issues %}\n\n**バージョンが検出されない:**\n\n```bash\n# デバッグ用：利用可能なタグを確認\ncurl -s https://api.github.com/repos/owner/repo/releases \\\n  | jq -r \'.[].tag_name\'\n\n# ログで検出プロセスを確認\ndewy server --log-format json -l debug --registry ghr://owner/repo\n```\n\n**想定外のバージョンが選択される:**\n\n```bash\n# プリリリース設定の確認\ndewy server --registry "ghr://owner/repo?pre-release=false"  # 安定版のみ\ndewy server --registry "ghr://owner/repo?pre-release=true"   # プリリリース込み\n```\n\n**アクセス権限の問題:**\n\n```bash\n# GitHub Tokenの確認\necho $GITHUB_TOKEN | cut -c1-10  # 最初の10文字のみ表示\ngh auth status  # GitHub CLI での認証状態確認\n```\n\n### 日時ベースのタグ使用時の注意 {% #datetime-tags-warning %}\n\n{% callout type="warning" title="日時ベースのタグ使用時の注意" %}\nDewyはタグを数値として比較するため、日時ベースのタグを使用する場合は注意が必要です。\n\n**問題のあるパターン:**\n```bash\n# ❌ 先頭の0が意図しない結果を招く\nv2025.0905.1005  # v2025.905.1005 として認識され、比較が正しく動作しない\nv2025.0101.0800  # v2025.101.800 として認識される\n```\n\n**推奨するパターン:**\n```bash\n# ✅ 先頭の0を除いた形式\nv2025.905.1005   # 9月5日 10時05分\nv2025.101.800    # 1月1日 8時00分\nv2025.1225.1500  # 12月25日 15時00分\n```\n\nまたは、セマンティックバージョニングに準拠した形式を使用してください：\n```bash\n# ✅ セマンティックバージョニング準拠\nv1.0.0, v1.1.0, v2.0.0\n```\n{% /callout %}\n\n### アップグレードの問題 {% #upgrade-issues %}\n\n**メジャーバージョンアップ対応:**\n\n```bash\n# データ移行を含む場合のフック活用\ndewy server --registry ghr://owner/repo \\\n  --before-deploy-hook "scripts/migrate-data.sh" \\\n  --after-deploy-hook "scripts/validate-upgrade.sh" \\\n  -- /opt/myapp/current/myapp\n```\n\n**ロールバック手順:**\n\n```bash\n# 手動でのロールバック\ncd /opt/myapp\nrm current\nln -sf releases/20241201T120000Z current  # 前のバージョンに戻す\nsystemctl restart myapp\n```\n\n## 高度な使用例 {% #advanced-usage %}\n\n### 複数環境での段階的展開 {% #staged-deployment %}\n\n**開発 → ステージング → 本番の自動化:**\n\n```bash\n# 開発環境：すべてのプリリリースを即座にデプロイ\ndewy server --registry "ghr://company/myapp?pre-release=true" \\\n  --interval 30s\n\n# ステージング環境：RC版以上をデプロイ\n# （将来的な機能として、フィルタリングオプションの追加を検討）\n\n# 本番環境：安定版のみを慎重にデプロイ\ndewy server --registry "ghr://company/myapp?pre-release=false" \\\n  --interval 600s \\\n  --before-deploy-hook "scripts/pre-deployment-check.sh"\n```\n\n### カスタムバージョンパターン {% #custom-patterns %}\n\n現在のDewyは標準的なセマンティックバージョニングのみをサポートしていますが、\n将来的には企業独自の命名規則にも対応予定です。\n\n## 関連項目 {% #related %}\n\n- [レジストリ](/ja/registry) - バージョン検出元の設定と各レジストリの詳細\n- [キャッシュ](/ja/cache) - バージョン情報とアーティファクトの保存管理\n- [アーキテクチャ](/ja/architecture) - Dewyの全体構成とデプロイプロセス\n- [FAQ](/ja/faq) - バージョニング関連のよくある質問'),u=s.Ay.parse(y,{slots:!1}),c=u.attributes.frontmatter?a.Ay.load(u.attributes.frontmatter):{},{components:m}=(0,i._)(g);var d=!0;let v={frontmatter:c};function h(n){let e=n.markdoc;return s.ZR.react(e.content,t,{components:{...m,...n.components}})}},7634:(n,e,r)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/ja/versioning",function(){return r(4298)}])}},n=>{n.O(0,[849,454,636,593,792],()=>n(n.s=7634)),_N_E=n.O()}]);